<?php
// üß† Nyelvfelismer√©s Google Translate API-val
function detectLanguage($text) {
    $url = "https://translate.googleapis.com/translate_a/single";
    $params = [
        'client' => 'gtx',
        'sl'     => 'auto',   // automatikus felismer√©s
        'tl'     => 'en',     // c√©lnyelv: angol (csak a detekt√°l√°shoz)
        'dt'     => 't',
        'q'      => $text
    ];
    $response = @file_get_contents($url . '?' . http_build_query($params));
    $result = json_decode($response, true);

    // Google √°ltal detekt√°lt nyelv (pl. 'hu', 'en', 'hi', 'ne', 'sa')
    $detected = isset($result[2]) ? strtolower($result[2]) : 'hu';

    // üõ†Ô∏è Normaliz√°l√°s: ha nep√°linak (ne) vagy hindinek (hi) jel√∂li,
    // de a sz√∂veg d√©van√°gari √≠r√°s√∫, akkor kezelj√ºk szanszkritk√©nt (sa).
    if (in_array($detected, ['ne', 'hi'])) {
        if (preg_match('/\p{Devanagari}/u', $text)) {
            $detected = 'sa'; // szanszkritk√©nt kezelj√ºk
        }
    }

    // Ha valami teljesen ismeretlen, ess√ºnk vissza magyarra
    if (!preg_match('/^[a-z]{2}$/', $detected)) {
        $detected = 'hu';
    }

    return $detected;
}

// üß™ Seg√©df√ºggv√©ny: informat√≠v-e a ford√≠t√°s?
// Csak akkor fogadjuk el, ha nem √ºres √©s nem azonos az eredetivel
function isInformativeTranslation($src, $dst) {
    if (trim($dst) === '') return false;
    $a = mb_strtolower(trim($src), 'UTF-8');
    $b = mb_strtolower(trim($dst), 'UTF-8');
    return $a !== $b;
}

// üåê Egyszeri ford√≠t√°s: adott forr√°s ‚Üí c√©l
function googleTranslateOnce($text, $source, $target) {
    $url = "https://translate.googleapis.com/translate_a/single";
    $params = [
        'client' => 'gtx',
        'sl'     => $source,
        'tl'     => $target,
        'dt'     => 't',
        'q'      => $text
    ];
    $response = @file_get_contents($url . '?' . http_build_query($params));
    $result = json_decode($response, true);
    if (!is_array($result) || !isset($result[0])) return '';
    $out = '';
    foreach ($result[0] as $chunk) {
        $out .= $chunk[0] ?? '';
    }
    return trim($out);
}

// üåê T√∂meges ford√≠t√°s ‚Äì okos v√°ltozat
// Ha d√©van√°gari sz√≥t kap, t√∂bb forr√°snyelvvel pr√≥b√°lkozik (sa, hi, ne)
function googleTranslateBatchSmart($lines, $sourceDetected, $target) {
    if (empty($lines)) return [];

    // üîÄ egyszerre t√∂bb sort k√ºld√ºnk
    $text = implode("\n", $lines);
    $sources = [$sourceDetected];

    // Ha d√©van√°gari van benne, pr√≥b√°ljuk t√∂bb forr√°ssal
    if (preg_match('/\p{Devanagari}/u', $text)) {
        $sources = ['sa', 'hi', 'ne'];
    }

    foreach ($sources as $sl) {
        $url = "https://translate.googleapis.com/translate_a/single"
             . "?client=gtx&sl={$sl}&tl={$target}&dt=t&q=" . rawurlencode($text);
        $response = @file_get_contents($url);
        $result = json_decode($response, true);

        if (is_array($result) && isset($result[0])) {
            $full = '';
            foreach ($result[0] as $item) {
                $full .= $item[0] ?? '';
            }
            $translations = array_map('trim', explode("\n", $full));

            // Ellen≈ërizz√ºk, hogy van‚Äëe informat√≠v ford√≠t√°s
            $ok = false;
            foreach ($translations as $i => $t) {
                if (isInformativeTranslation($lines[$i], $t)) {
                    $ok = true; break;
                }
            }
            if ($ok) return $translations;
        }
    }

    // Ha semmi nem j√∂tt vissza
    return array_fill(0, count($lines), '');
}

// üìä √Ållapotf√°jl friss√≠t√©se (pl. progress barhoz)
function updateStatusFile($statusFile, $srcLang, $targetLang, $original, $translated, $progress, $history) {
    $status = [
        'srcLang'    => $srcLang,
        'targetLang' => $targetLang,
        'original'   => $original,
        'translated' => $translated,
        'progress'   => $progress,
        'history'    => $history
    ];
    file_put_contents($statusFile, json_encode($status, JSON_UNESCAPED_UNICODE | JSON_PRETTY_PRINT));
}


// üî§ Devan√°gari ‚Üí latin (IAST-szer≈±) √°t√≠r√°s
function transliterateDevanagari($text) {
    $map = [
        // Mag√°nhangz√≥k
        '‡§Ö'=>'a','‡§Ü'=>'ƒÅ','‡§á'=>'i','‡§à'=>'ƒ´','‡§â'=>'u','‡§ä'=>'≈´',
        '‡§ã'=>'·πõ','‡•†'=>'·πù','‡§å'=>'·∏∑','‡•°'=>'·∏π',
        '‡§è'=>'e','‡§ê'=>'ai','‡§ì'=>'o','‡§î'=>'au',

        // M√°ssalhangz√≥k
        '‡§ï'=>'ka','‡§ñ'=>'kha','‡§ó'=>'ga','‡§ò'=>'gha','‡§ô'=>'·πÖa',
        '‡§ö'=>'ca','‡§õ'=>'cha','‡§ú'=>'ja','‡§ù'=>'jha','‡§û'=>'√±a',
        '‡§ü'=>'·π≠a','‡§†'=>'·π≠ha','‡§°'=>'·∏ça','‡§¢'=>'·∏çha','‡§£'=>'·πáa',
        '‡§§'=>'ta','‡§•'=>'tha','‡§¶'=>'da','‡§ß'=>'dha','‡§®'=>'na',
        '‡§™'=>'pa','‡§´'=>'pha','‡§¨'=>'ba','‡§≠'=>'bha','‡§Æ'=>'ma',
        '‡§Ø'=>'ya','‡§∞'=>'ra','‡§≤'=>'la','‡§µ'=>'va',
        '‡§∂'=>'≈õa','‡§∑'=>'·π£a','‡§∏'=>'sa','‡§π'=>'ha',

        // Ligat√∫r√°k √©s speci√°lis jelek
        '‡§Ç'=>'·πÉ','‡§É'=>'·∏•','‡§Å'=>'ÃÉ','‡§Ω'=>"‚Äô",
        '‡•ç'=>'', // halant: elnyeli a mag√°nhangz√≥t

        // Sz√°mok
        '‡•¶'=>'0','‡•ß'=>'1','‡•®'=>'2','‡•©'=>'3','‡•™'=>'4',
        '‡•´'=>'5','‡•¨'=>'6','‡•≠'=>'7','‡•Æ'=>'8','‡•Ø'=>'9',
    ];

    // Karakterenk√©nt cser√©lj√ºk
    $out = '';
    $chars = preg_split('//u', $text, -1, PREG_SPLIT_NO_EMPTY);
    foreach ($chars as $ch) {
        $out .= $map[$ch] ?? $ch; // ha nincs mapping, hagyjuk eredetiben
    }

    // üßπ Ut√≥lagos tiszt√≠t√°s: felesleges "a" a sz√≥v√©gekr≈ël (pl. "vadantia" ‚Üí "vadanti")
    $out = preg_replace('/a(\s|$)/u', '$1', $out);

    return $out;
}
